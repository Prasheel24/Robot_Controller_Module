<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="test_8cpp" kind="file" language="C++">
    <compoundname>test.cpp</compoundname>
    <includes local="no">gtest/gtest.h</includes>
    <includes local="no">cstdlib</includes>
    <includes local="no">memory</includes>
    <includes refid="_navigation_8hpp" local="yes">Navigation.hpp</includes>
    <includes refid="_steer_algorithm_8hpp" local="yes">SteerAlgorithm.hpp</includes>
    <incdepgraph>
      <node id="57">
        <label>test/test.cpp</label>
        <link refid="test.cpp"/>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>Navigation.hpp</label>
        <link refid="_navigation_8hpp"/>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>SteerAlgorithm.hpp</label>
        <link refid="_steer_algorithm_8hpp"/>
      </node>
      <node id="58">
        <label>gtest/gtest.h</label>
      </node>
      <node id="59">
        <label>cstdlib</label>
      </node>
      <node id="60">
        <label>memory</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="test_8cpp_1a093604a7433c91e9a41a6c486ff843b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Navigation, testSetPid)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_navigation" kindref="compound">Navigation</ref></type>
        </param>
        <param>
          <type>testSetPid</type>
        </param>
        <briefdescription>
<para>Test to check the set functions for kp_,ki_ and kd_. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/test.cpp" line="48" column="1" bodyfile="test/test.cpp" bodystart="48" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="test_8cpp_1a5c632ae16e5ba30ae35d75900430e15a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Navigation, testGetPid)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_navigation" kindref="compound">Navigation</ref></type>
        </param>
        <param>
          <type>testGetPid</type>
        </param>
        <briefdescription>
<para>Test to check that values of kp_,ki_ and kd_ are below 1 or not. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/test.cpp" line="59" column="1" bodyfile="test/test.cpp" bodystart="59" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="test_8cpp_1a87664aeb63270d8e6408aa77a3db7d61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Navigation, testVelocity)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_navigation" kindref="compound">Navigation</ref></type>
        </param>
        <param>
          <type>testVelocity</type>
        </param>
        <briefdescription>
<para>Test to check the output of PID Controller in the first cycle is within the set bound. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/test.cpp" line="71" column="1" bodyfile="test/test.cpp" bodystart="71" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="test_8cpp_1a302ee9fe0ef08a6beaea103c911981ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(SteerAlgorithm, testCorrRadius)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_steer_algorithm" kindref="compound">SteerAlgorithm</ref></type>
        </param>
        <param>
          <type>testCorrRadius</type>
        </param>
        <briefdescription>
<para>Tests to check that the set functions works and the value of corrRadius in below setlimit. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/test.cpp" line="80" column="1" bodyfile="test/test.cpp" bodystart="80" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="test_8cpp_1ab38a7e56f4e7418febe58d9daf9e4b58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(SteerAlgorithm, testwheel)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_steer_algorithm" kindref="compound">SteerAlgorithm</ref></type>
        </param>
        <param>
          <type>testwheel</type>
        </param>
        <briefdescription>
<para>Tests to check if the wheel angles get resetted and the Ackeermann kinematic model is is properly implemented. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/test.cpp" line="91" column="1" bodyfile="test/test.cpp" bodystart="91" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="test_8cpp_1a2e8c38dec883b8cfc46adb1e0cedb000" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(SteerAlgorithm, testCalculations)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_steer_algorithm" kindref="compound">SteerAlgorithm</ref></type>
        </param>
        <param>
          <type>testCalculations</type>
        </param>
        <briefdescription>
<para>Test to check the functions arclength and turnTime provide right length and time values. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/test.cpp" line="101" column="1" bodyfile="test/test.cpp" bodystart="101" bodyend="105"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Mid Term Project. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="copyright"><para>MIT License, Copyright © 2019 Raj Shinde</para></simplesect>
<simplesect kind="author"><para>Sprint-1 Raj Shinde- driver and Prasheel Renkuntla- navigator </para></simplesect>
<simplesect kind="author"><para>Sprint-2 Prasheel Renkuntla- driver and Raj Shinde- navigator </para></simplesect>
<simplesect kind="date"><para>10/10/2019 </para></simplesect>
<simplesect kind="version"><para>1.0 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment">MIT<sp/>License</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Copyright<sp/>©<sp/>2019<sp/>Raj<sp/>Shinde</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment">Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person</highlight></codeline>
<codeline lineno="7"><highlight class="comment">obtaining<sp/>a<sp/>copy<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation</highlight></codeline>
<codeline lineno="8"><highlight class="comment">files<sp/>(the<sp/>“Software”),<sp/>to<sp/>deal<sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,</highlight></codeline>
<codeline lineno="9"><highlight class="comment">including<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,</highlight></codeline>
<codeline lineno="10"><highlight class="comment">publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies<sp/>of<sp/>the<sp/>Software,</highlight></codeline>
<codeline lineno="11"><highlight class="comment">and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,</highlight></codeline>
<codeline lineno="12"><highlight class="comment">subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/></highlight></codeline>
<codeline lineno="15"><highlight class="comment">in<sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"></highlight></codeline>
<codeline lineno="17"><highlight class="comment">THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>“AS<sp/>IS”,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS</highlight></codeline>
<codeline lineno="18"><highlight class="comment">OR<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="19"><highlight class="comment">FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL</highlight></codeline>
<codeline lineno="20"><highlight class="comment">THE<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="21"><highlight class="comment">LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING</highlight></codeline>
<codeline lineno="22"><highlight class="comment">FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR</highlight></codeline>
<codeline lineno="23"><highlight class="comment">OTHER<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor">#include<sp/>&lt;gtest/gtest.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_navigation_8hpp" kindref="compound">Navigation.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_steer_algorithm_8hpp" kindref="compound">SteerAlgorithm.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><ref refid="test_8cpp_1a093604a7433c91e9a41a6c486ff843b3" kindref="member">TEST</ref>(<ref refid="class_navigation" kindref="compound">Navigation</ref>,<sp/>testSetPid)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><ref refid="class_navigation" kindref="compound">Navigation</ref><sp/>testn;</highlight></codeline>
<codeline lineno="50"><highlight class="normal">EXPECT_TRUE(testn.<ref refid="class_navigation_1a6dd95f46ff4ecc69895452a1879c30af" kindref="member">setKp_</ref>(1));</highlight></codeline>
<codeline lineno="51"><highlight class="normal">EXPECT_TRUE(testn.<ref refid="class_navigation_1a539d10206ceb162171e39c36e8aa8f0f" kindref="member">setKi_</ref>(1));</highlight></codeline>
<codeline lineno="52"><highlight class="normal">EXPECT_TRUE(testn.<ref refid="class_navigation_1a4986e4357d9707ddf92cf8f559ef3dce" kindref="member">setKd_</ref>(1));</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><ref refid="test_8cpp_1a093604a7433c91e9a41a6c486ff843b3" kindref="member">TEST</ref>(<ref refid="class_navigation" kindref="compound">Navigation</ref>,<sp/>testGetPid)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><ref refid="class_navigation" kindref="compound">Navigation</ref><sp/>testn;</highlight></codeline>
<codeline lineno="61"><highlight class="normal">EXPECT_LT(testn.<ref refid="class_navigation_1ab1469d74f4838a9d32a8647d22701f9f" kindref="member">getKp_</ref>(),<sp/>1);</highlight></codeline>
<codeline lineno="62"><highlight class="normal">EXPECT_LT(testn.<ref refid="class_navigation_1a1a84392d6cce3f60df452ab482b5647c" kindref="member">getKi_</ref>(),<sp/>1);</highlight></codeline>
<codeline lineno="63"><highlight class="normal">EXPECT_LT(testn.<ref refid="class_navigation_1ac6441bb601483166ef7a8081b76f634d" kindref="member">getKd_</ref>(),<sp/>1);</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><ref refid="test_8cpp_1a093604a7433c91e9a41a6c486ff843b3" kindref="member">TEST</ref>(<ref refid="class_navigation" kindref="compound">Navigation</ref>,<sp/>testVelocity)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><ref refid="class_navigation" kindref="compound">Navigation</ref><sp/>testn;</highlight></codeline>
<codeline lineno="73"><highlight class="normal">ASSERT_NEAR(testn.<ref refid="class_navigation_1a0eb1833ccc91d6fd5822938797686708" kindref="member">calculate</ref>(10,<sp/>30,<sp/>0),<sp/>30,<sp/>10);</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><ref refid="test_8cpp_1a093604a7433c91e9a41a6c486ff843b3" kindref="member">TEST</ref>(<ref refid="class_steer_algorithm" kindref="compound">SteerAlgorithm</ref>,<sp/>testCorrRadius)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><ref refid="class_steer_algorithm" kindref="compound">SteerAlgorithm</ref><sp/>tests;</highlight></codeline>
<codeline lineno="82"><highlight class="normal">EXPECT_TRUE(tests.<ref refid="class_steer_algorithm_1a93cf1fc7d06376ddeaa4e81f2b0a22cc" kindref="member">setCorrRadius_</ref>(10));</highlight></codeline>
<codeline lineno="83"><highlight class="normal">EXPECT_LT(tests.<ref refid="class_steer_algorithm_1a06a7dd049280fab40d1b54c912daf399" kindref="member">getCorrRadius_</ref>(),<sp/>20);</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><ref refid="test_8cpp_1a093604a7433c91e9a41a6c486ff843b3" kindref="member">TEST</ref>(<ref refid="class_steer_algorithm" kindref="compound">SteerAlgorithm</ref>,<sp/>testwheel)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><ref refid="class_steer_algorithm" kindref="compound">SteerAlgorithm</ref><sp/>tests;</highlight></codeline>
<codeline lineno="93"><highlight class="normal">EXPECT_TRUE(tests.<ref refid="class_steer_algorithm_1ab251b6fd1f88fb7a526b0d55cd12625b" kindref="member">resetWheel</ref>());</highlight></codeline>
<codeline lineno="94"><highlight class="normal">EXPECT_LT(tests.<ref refid="class_steer_algorithm_1a6067af69593713f561890ae8ad23f5ff" kindref="member">changeWheelAngles</ref>(10,<sp/>4,<sp/>8),<sp/>46);</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><ref refid="test_8cpp_1a093604a7433c91e9a41a6c486ff843b3" kindref="member">TEST</ref>(<ref refid="class_steer_algorithm" kindref="compound">SteerAlgorithm</ref>,<sp/>testCalculations)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><ref refid="class_steer_algorithm" kindref="compound">SteerAlgorithm</ref><sp/>tests;</highlight></codeline>
<codeline lineno="103"><highlight class="normal">EXPECT_LT(tests.<ref refid="class_steer_algorithm_1a17ff78af17e900f752237d274bcf751d" kindref="member">arcLength</ref>(360,<sp/>10),<sp/>70);</highlight></codeline>
<codeline lineno="104"><highlight class="normal">EXPECT_GT(tests.<ref refid="class_steer_algorithm_1aefdb433f65c47bf6e0d6af5de98c8f5a" kindref="member">turnTime</ref>(3,<sp/>10),<sp/>0);</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="test/test.cpp"/>
  </compounddef>
</doxygen>
