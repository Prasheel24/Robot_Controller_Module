<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="test_navigation_8cpp" kind="file" language="C++">
    <compoundname>testNavigation.cpp</compoundname>
    <includes local="no">gtest/gtest.h</includes>
    <includes local="no">cstdlib</includes>
    <includes local="no">memory</includes>
    <includes refid="_navigation_8hpp" local="yes">Navigation.hpp</includes>
    <incdepgraph>
      <node id="94">
        <label>SteerAlgorithm.hpp</label>
        <link refid="_steer_algorithm_8hpp"/>
      </node>
      <node id="95">
        <label>vector</label>
      </node>
      <node id="93">
        <label>Navigation.hpp</label>
        <link refid="_navigation_8hpp"/>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
      </node>
      <node id="90">
        <label>gtest/gtest.h</label>
      </node>
      <node id="91">
        <label>cstdlib</label>
      </node>
      <node id="89">
        <label>test/testNavigation.cpp</label>
        <link refid="testNavigation.cpp"/>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
      </node>
      <node id="92">
        <label>memory</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="test_navigation_8cpp_1a093604a7433c91e9a41a6c486ff843b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Navigation, testSetPid)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_navigation" kindref="compound">Navigation</ref></type>
        </param>
        <param>
          <type>testSetPid</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/testNavigation.cpp" line="50" column="1" bodyfile="test/testNavigation.cpp" bodystart="50" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="test_navigation_8cpp_1a5c632ae16e5ba30ae35d75900430e15a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Navigation, testGetPid)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_navigation" kindref="compound">Navigation</ref></type>
        </param>
        <param>
          <type>testGetPid</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/testNavigation.cpp" line="63" column="1" bodyfile="test/testNavigation.cpp" bodystart="63" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="test_navigation_8cpp_1ae18ffeef30aacd9eb6294f8eb5460d80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Navigation, testPID)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_navigation" kindref="compound">Navigation</ref></type>
        </param>
        <param>
          <type>testPID</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/testNavigation.cpp" line="76" column="1" bodyfile="test/testNavigation.cpp" bodystart="76" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="test_navigation_8cpp_1acc7325d4d1f9e57e7d887a7af00c04b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Navigation, testConvergence)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_navigation" kindref="compound">Navigation</ref></type>
        </param>
        <param>
          <type>testConvergence</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/testNavigation.cpp" line="88" column="1" bodyfile="test/testNavigation.cpp" bodystart="88" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="test_navigation_8cpp_1ad175cd43f79b49368e38d6706c97f1c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Navigation, testVelocityPlot)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_navigation" kindref="compound">Navigation</ref></type>
        </param>
        <param>
          <type>testVelocityPlot</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/testNavigation.cpp" line="102" column="1" bodyfile="test/testNavigation.cpp" bodystart="102" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="test_navigation_8cpp_1a3bdb2deb2b979e58079008d0e44cf8ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Navigation, testSteerAnglePlot)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_navigation" kindref="compound">Navigation</ref></type>
        </param>
        <param>
          <type>testSteerAnglePlot</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/testNavigation.cpp" line="115" column="1" bodyfile="test/testNavigation.cpp" bodystart="115" bodyend="121"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Mid Term Project. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="copyright"><para>MIT License, Copyright © 2019 Raj Shinde</para></simplesect>
<simplesect kind="author"><para>Sprint-1 Raj Shinde- driver and Prasheel Renkuntla- navigator </para></simplesect>
<simplesect kind="author"><para>Sprint-2 Prasheel Renkuntla- driver and Raj Shinde- navigator </para></simplesect>
<simplesect kind="author"><para>Gmock- Prasheel Renkuntla </para></simplesect>
<simplesect kind="date"><para>11/22/2019 </para></simplesect>
<simplesect kind="version"><para>7.0 </para></simplesect>
</para><sect1 id="test_steer_algorithm_8cpp_1Tests">
<title>all files in module with gmock</title>
</sect1>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment">MIT<sp/>License</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Copyright<sp/>©<sp/>2019<sp/>Raj<sp/>Shinde</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment">Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person</highlight></codeline>
<codeline lineno="7"><highlight class="comment">obtaining<sp/>a<sp/>copy<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation</highlight></codeline>
<codeline lineno="8"><highlight class="comment">files<sp/>(the<sp/>“Software”),<sp/>to<sp/>deal<sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,</highlight></codeline>
<codeline lineno="9"><highlight class="comment">including<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,</highlight></codeline>
<codeline lineno="10"><highlight class="comment">publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies<sp/>of<sp/>the<sp/>Software,</highlight></codeline>
<codeline lineno="11"><highlight class="comment">and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,</highlight></codeline>
<codeline lineno="12"><highlight class="comment">subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/></highlight></codeline>
<codeline lineno="15"><highlight class="comment">in<sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"></highlight></codeline>
<codeline lineno="17"><highlight class="comment">THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>“AS<sp/>IS”,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS</highlight></codeline>
<codeline lineno="18"><highlight class="comment">OR<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="19"><highlight class="comment">FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL</highlight></codeline>
<codeline lineno="20"><highlight class="comment">THE<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="21"><highlight class="comment">LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING</highlight></codeline>
<codeline lineno="22"><highlight class="comment">FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR</highlight></codeline>
<codeline lineno="23"><highlight class="comment">OTHER<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="preprocessor">#include<sp/>&lt;gtest/gtest.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_navigation_8hpp" kindref="compound">Navigation.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="test_navigation_8cpp_1a093604a7433c91e9a41a6c486ff843b3" refkind="member"><highlight class="normal"><ref refid="test_navigation_8cpp_1a093604a7433c91e9a41a6c486ff843b3" kindref="member">TEST</ref>(<ref refid="class_navigation" kindref="compound">Navigation</ref>,<sp/>testSetPid)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><ref refid="class_navigation" kindref="compound">Navigation</ref><sp/>testn;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Expect<sp/>true<sp/>if<sp/>we<sp/>are<sp/>able<sp/>to<sp/>set<sp/>the<sp/>gains</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">EXPECT_TRUE(testn.<ref refid="class_navigation_1a6dd95f46ff4ecc69895452a1879c30af" kindref="member">setKp_</ref>(1));</highlight></codeline>
<codeline lineno="54"><highlight class="normal">EXPECT_TRUE(testn.<ref refid="class_navigation_1a539d10206ceb162171e39c36e8aa8f0f" kindref="member">setKi_</ref>(1));</highlight></codeline>
<codeline lineno="55"><highlight class="normal">EXPECT_TRUE(testn.<ref refid="class_navigation_1a4986e4357d9707ddf92cf8f559ef3dce" kindref="member">setKd_</ref>(1));</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="test_navigation_8cpp_1a5c632ae16e5ba30ae35d75900430e15a" refkind="member"><highlight class="normal"><ref refid="test_navigation_8cpp_1a093604a7433c91e9a41a6c486ff843b3" kindref="member">TEST</ref>(<ref refid="class_navigation" kindref="compound">Navigation</ref>,<sp/>testGetPid)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><ref refid="class_navigation" kindref="compound">Navigation</ref><sp/>testn;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Expect<sp/>true<sp/>if<sp/>it<sp/>returns<sp/>the<sp/>gains<sp/>set<sp/>from<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal">EXPECT_LT(testn.<ref refid="class_navigation_1ab1469d74f4838a9d32a8647d22701f9f" kindref="member">getKp_</ref>(),<sp/>1);</highlight></codeline>
<codeline lineno="67"><highlight class="normal">EXPECT_LT(testn.<ref refid="class_navigation_1a1a84392d6cce3f60df452ab482b5647c" kindref="member">getKi_</ref>(),<sp/>1);</highlight></codeline>
<codeline lineno="68"><highlight class="normal">EXPECT_LT(testn.<ref refid="class_navigation_1ac6441bb601483166ef7a8081b76f634d" kindref="member">getKd_</ref>(),<sp/>1);</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="test_navigation_8cpp_1ae18ffeef30aacd9eb6294f8eb5460d80" refkind="member"><highlight class="normal"><ref refid="test_navigation_8cpp_1a093604a7433c91e9a41a6c486ff843b3" kindref="member">TEST</ref>(<ref refid="class_navigation" kindref="compound">Navigation</ref>,<sp/>testPID)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><ref refid="class_navigation" kindref="compound">Navigation</ref><sp/>testn;</highlight></codeline>
<codeline lineno="78"><highlight class="normal">std::vector&lt;double&gt;<sp/>out{0.0,<sp/>0.0,<sp/>0.0,<sp/>0.0};<sp/></highlight></codeline>
<codeline lineno="79"><highlight class="normal">EXPECT_EQ(testn.<ref refid="class_navigation_1ae8fc8426c7277de0b34aec951fc28e2c" kindref="member">calculatePID</ref>(10,<sp/>10),<sp/>out);</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="test_navigation_8cpp_1acc7325d4d1f9e57e7d887a7af00c04b8" refkind="member"><highlight class="normal"><ref refid="test_navigation_8cpp_1a093604a7433c91e9a41a6c486ff843b3" kindref="member">TEST</ref>(<ref refid="class_navigation" kindref="compound">Navigation</ref>,<sp/>testConvergence)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><ref refid="class_navigation" kindref="compound">Navigation</ref><sp/>testn;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Calculates<sp/>the<sp/>convergence<sp/>for<sp/>setpoint:40,<sp/>Current<sp/>Velocity:<sp/>10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>target<sp/>heading:<sp/>0,<sp/>and<sp/>flag<sp/>is<sp/>1<sp/>as<sp/>we<sp/>do<sp/>not<sp/>need<sp/>graphs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal">ASSERT_NEAR(testn.<ref refid="class_navigation_1a0f83b511cec12a68f2c3466c40c5d3cb" kindref="member">calculate</ref>(0,<sp/>10,<sp/>40,<sp/>1),<sp/>40,<sp/>2);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Calculates<sp/>the<sp/>convergence<sp/>for<sp/>setpoint:40,<sp/>Current<sp/>Velocity:<sp/>10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>target<sp/>heading:<sp/>120,<sp/>and<sp/>flag<sp/>is<sp/>0<sp/>as<sp/>we<sp/>do<sp/>not<sp/>need<sp/>graphs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal">ASSERT_NEAR(testn.<ref refid="class_navigation_1a0f83b511cec12a68f2c3466c40c5d3cb" kindref="member">calculate</ref>(120,<sp/>10,<sp/>40,<sp/>0),<sp/>120,<sp/>1);</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="test_navigation_8cpp_1ad175cd43f79b49368e38d6706c97f1c0" refkind="member"><highlight class="normal"><ref refid="test_navigation_8cpp_1a093604a7433c91e9a41a6c486ff843b3" kindref="member">TEST</ref>(<ref refid="class_navigation" kindref="compound">Navigation</ref>,<sp/>testVelocityPlot)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><ref refid="class_navigation" kindref="compound">Navigation</ref><sp/>testn;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal">std::vector&lt;std::pair&lt;double,<sp/>double&gt;&gt;<sp/>points;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Tests<sp/>if<sp/>GNUPLOT<sp/>is<sp/>working<sp/>for<sp/>velocity<sp/>graph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal">EXPECT_FALSE(testn.<ref refid="class_navigation_1a632e4d0d9be60dd775b4e57edb797073" kindref="member">gnuVelocityGraph</ref>(points,10,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="test_navigation_8cpp_1a3bdb2deb2b979e58079008d0e44cf8ae" refkind="member"><highlight class="normal"><ref refid="test_navigation_8cpp_1a093604a7433c91e9a41a6c486ff843b3" kindref="member">TEST</ref>(<ref refid="class_navigation" kindref="compound">Navigation</ref>,<sp/>testSteerAnglePlot)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><ref refid="class_navigation" kindref="compound">Navigation</ref><sp/>testn;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal">std::vector&lt;std::pair&lt;double,<sp/>double&gt;&gt;<sp/>points;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Tests<sp/>if<sp/>GNUPLOT<sp/>is<sp/>working<sp/>for<sp/>velocity<sp/>graph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal">EXPECT_FALSE(testn.<ref refid="class_navigation_1ab35bfaf55fde4a16c05d88ef8789a947" kindref="member">gnuSteerAngleGraph</ref>(points,10,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="test/testNavigation.cpp"/>
  </compounddef>
</doxygen>
